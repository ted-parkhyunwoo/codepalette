//! 참조자 (reference) '&'    포인터 대신 매개변수로 자주쓰임. (어레이나 포인터처럼 호출스택 밖의 변수 값을 바꾸는게 가능.) -게다가 스택 메모리공간도 차지 안함.
// void func(const int& a)  함수의 수정하지 않을 매개변수로는 이런 형태로 많이 쓰임.

// 선언 :  int& 동일 타입만 가능. 역참조(*)를 쓰지 않고도 값을 내뱉음.
// const pointer면서 역참조를 쓰지 않는 포인터의 간단한 버전.(메모리에 주소할당 안됨.)


// l-value 이름을 가지며 주소를 갖는 값. + const가 아니라면 수정 가능한 값
// r-value 주소를 갖지 않고 대입대상이 될 수 없음.


//예외사항. r-value를 참조자로 사용할 때.
// int& ref2 = 100;         //사용불가
const int& ref3 = 100;
int&& ref4 = 100;


#include <iostream>

int main() {
    int a = 10;

    int& b = a;         //!참조자 선언 (반드시 선언과 동시에 초기화.)
    int* c = nullptr;        //포인터 선언
    c = &a;


    b = 20;             //참조자로 사용시.  (메모리 검사결과 진짜 안뜸.)
    *c = 30;            //포인터로 사용할 때.



    return 0;
}

